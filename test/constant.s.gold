.data

d0: .asciz "%i"
L1:
.text
.global main


main:
stmfd sp!,{v1,v2,v3,v4,v5,fp,lr}
add fp,sp,#24
sub sp,fp,#76
mov v1,#12
str v1,[fp,#-28]
mov v2,#8
str v2,[fp,#-48]
ldr v2,[fp,#-48]					// this instruction is removed
mov v3,v2
str v3,[fp,#-36]
mov v4,#7
str v4,[fp,#-32]
ldr v3,[fp,#-36]
ldr v4,[fp,#-32]					// this instruction is removed
mul v5,v3,v4
str v5,[fp,#-52]
ldr v5,[fp,#-52]
mov v1,#2
mul v2,v5,v1
str v2,[fp,#-56]
ldr v5,[fp,#-56]					// this instruction is removed
add v2,v5,#7
str v2,[fp,#-60]
ldr v2,[fp,#-60]					// this instruction is removed
mov v5,v2
str v5,[fp,#-40]
ldr v5,[fp,#-40]					// this instruction is removed
ldr v3,[fp,#-36]
mul v2,v5,v3
str v2,[fp,#-64]
ldr v4,[fp,#-64]
ldr v1,[fp,#-32]
sub v2,v4,v1
str v2,[fp,#-68]
ldr v2,[fp,#-68]					// this instruction is removed
sub v1,v2,#3
str v1,[fp,#-72]
ldr v1,[fp,#-72]					// this instruction is removed
mov v2,v1
str v2,[fp,#-44]
ldr v5,[fp,#-40]
ldr v2,[fp,#-44]					// this instruction is removed
sub v1,v5,v2
str v1,[fp,#-76]
ldr v1,[fp,#-76]					// this instruction is removed
mov v3,v1
str v3,[fp,#-36]
stmfd sp!,{a1,a2,a3,a4}
ldr a1,=d0
ldr a2,[fp,#-28]					// println(i) is converted to println(12) since i has a constant value
bl printf
ldmfd sp!,{a1,a2,a3,a4}

.mainExit:
sub sp,fp,#24
ldmfd sp!,{v1,v2,v3,v4,v5,fp,pc}
