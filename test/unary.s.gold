.data

d0_true: .asciz "true"
d0_false: .asciz "false"
d1: .asciz "\n"
d2_true: .asciz "true"
d2_false: .asciz "false"
d3: .asciz "Wrong answer\n"
d4: .asciz "Correct answer\n"
d5: .asciz "GetC: "
d6_true: .asciz "true"
d6_false: .asciz "false"
d7: .asciz "\n"
L1:
.text
.global main


SimpleMain_0:
stmfd sp!,{v1,v2,v3,v4,v5,fp,lr}
add fp,sp,#24
sub sp,fp,#24
mov a1,a2
b .SimpleMain_0Exit					// this instruction is removed

.SimpleMain_0Exit:
sub sp,fp,#24
ldmfd sp!,{v1,v2,v3,v4,v5,fp,pc}

SimpleMain_1:
stmfd sp!,{v1,v2,v3,v4,v5,fp,lr}
add fp,sp,#24
sub sp,fp,#28
mov v2,a2
mvn v1,v2
str v1,[fp,#-28]
ldr v1,[fp,#-28]					// this instruction is removed
mov v3,v1
str v3,[a1]
stmfd sp!,{a1,a2,a3,a4}
ldr a1,=d5
mov a2,#0
bl printf
ldmfd sp!,{a1,a2,a3,a4}				// this instruction is removed
stmfd sp!,{a1,a2,a3,a4}				// this instruction is removed
ldr a1,[a1]
cmp a1,#0
beq ._d6_falseFalse
ldr a1,=d6_true
b ._d6_true_exit

._d6_falseFalse:
ldr a1,=d6_false

._d6_true_exit:
bl printf
ldmfd sp!,{a1,a2,a3,a4}				// this instruction is removed
stmfd sp!,{a1,a2,a3,a4}				// this instruction is removed
ldr a1,=d7
mov a2,#0
bl printf
ldmfd sp!,{a1,a2,a3,a4}
ldr a1,[a1]
b .SimpleMain_1Exit					// this instruction is removed

.SimpleMain_1Exit:
sub sp,fp,#24
ldmfd sp!,{v1,v2,v3,v4,v5,fp,pc}

main:
stmfd sp!,{v1,v2,v3,v4,v5,fp,lr}
add fp,sp,#24
sub sp,fp,#56
mov a1,#4
bl malloc
str a1,[fp,#-40]
mov v2,#5
str v2,[fp,#-28]
mov v3,#2
str v3,[fp,#-32]
ldr v5,[fp,#-32]
neg v4,v5
str v4,[fp,#-44]
ldr v2,[fp,#-28]
ldr v4,[fp,#-44]					// this instruction is removed
add v3,v2,v4
str v3,[fp,#-48]
ldr v3,[fp,#-48]					// this instruction is removed
mov v2,v3
str v2,[fp,#-28]
mvn v1,#0
str v1,[fp,#-52]
ldr v1,[fp,#-52]					// this instruction is removed
mov v2,v1
str v2,[fp,#-36]
stmfd sp!,{a1,a2,a3,a4}
mov a1,v2
cmp a1,#0
beq ._d0_falseFalse
ldr a1,=d0_true
b ._d0_true_exit

._d0_falseFalse:
ldr a1,=d0_false

._d0_true_exit:
bl printf
ldmfd sp!,{a1,a2,a3,a4}				// this instruction is removed
stmfd sp!,{a1,a2,a3,a4}				// this instruction is removed
ldr a1,=d1
mov a2,#0
bl printf
ldmfd sp!,{a1,a2,a3,a4}				// this instruction is removed
stmfd sp!,{a1,a2,a3,a4}				// this instruction is removed
ldr a1,[fp,#-40]
mov a2,#0
bl SimpleMain_1
mov v1,a1
ldmfd sp!,{a1,a2,a3,a4}
str v1,[fp,#-56]
ldr v1,[fp,#-56]					// this instruction is removed
mov v2,v1
str v2,[fp,#-36]
stmfd sp!,{a1,a2,a3,a4}
mov a1,v2
cmp a1,#0
beq ._d2_falseFalse
ldr a1,=d2_true
b ._d2_true_exit

._d2_falseFalse:
ldr a1,=d2_false

._d2_true_exit:
bl printf
ldmfd sp!,{a1,a2,a3,a4}
ldr v2,[fp,#-36]
mvn v1,#0
cmp v2,v1
beq .1
stmfd sp!,{a1,a2,a3,a4}
ldr a1,=d3
mov a2,#0
bl printf
ldmfd sp!,{a1,a2,a3,a4}
b .2

.1:
stmfd sp!,{a1,a2,a3,a4}
ldr a1,=d4
mov a2,#0
bl printf
ldmfd sp!,{a1,a2,a3,a4}

.2:

.mainExit:
sub sp,fp,#24
ldmfd sp!,{v1,v2,v3,v4,v5,fp,pc}
